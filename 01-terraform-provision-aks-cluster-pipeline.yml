trigger:
- main

pool:
  vmImage: ubuntu-latest

# Stage-1: Terraform Validate Stage
## Step-1: Publish Artifacts to Pipeline (Pipeline artifacts provide a way to share files between stages in a pipeline or between different pipelines. )
## Step-2: Install Latest Terraform (0.13.5) (Ideally not needed if we use default Ubuntu Agents)
## Step-3: Validate Terraform Manifests (terraform init, terraform validate)

stages:
  - stage: TerraformValidate
    jobs:
      - job: TerraformValidateJob
        continueOnError: false
        steps:
          - task: PublishPipelineArtifact@1
            displayName: Terraform Install
            inputs:
                targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
                artifact: 'terraform-manifests-out'
                publishLocation: 'pipeline'

          - task: TerraformInstaller@2
            inputs:
             terraformVersion: 'latest'
          - task: TerraformCLI@0
            displayName: Terraform Init
            inputs:
                  command: 'init'
                  workingDirectory: '$(System.DefaultWorkingDirectory)/'
                  backendType: 'azurerm'
                  backendServiceArm: 'terraform-aks-azurerm-svc-con'
                  backendAzureRmTenantId: '1ab9a4d0-1e66-456e-a0c7-5af91014d0bf'
                  backendAzureRmSubscriptionId: '73067bac-a826-4716-8792-58d8f298f0a4'
                  backendAzureRmResourceGroupName: 'tfstate-rg'
                  backendAzureRmStorageAccountName: 'tfstatehiy'
                  backendAzureRmContainerName: 'tfstate'
                  backendAzureRmKey: 'aks-base.tfstate'
                  allowTelemetryCollection: true
          - task: TerraformCLI@0
            displayName: Terraform Validate
            inputs:
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
              allowTelemetryCollection: true
       
